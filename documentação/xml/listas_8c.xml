<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="listas_8c" kind="file" language="C++">
    <compoundname>listas.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="camada__de__dados_8h" local="yes">camada_de_dados.h</includes>
    <includes refid="logica_8h" local="yes">logica.h</includes>
    <includes refid="listas_8h" local="yes">listas.h</includes>
    <incdepgraph>
      <node id="27">
        <label>stdlib.h</label>
      </node>
      <node id="28">
        <label>string.h</label>
      </node>
      <node id="25">
        <label>listas.c</label>
        <link refid="listas_8c"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>listas.h</label>
        <link refid="listas_8h"/>
      </node>
      <node id="29">
        <label>math.h</label>
      </node>
      <node id="32">
        <label>logica.h</label>
        <link refid="logica_8h"/>
      </node>
      <node id="30">
        <label>camada_de_dados.h</label>
        <link refid="camada__de__dados_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="listas_8c_1a3f533b20c9ab2ad5b12ea67b8de913a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">llig</ref></type>
        <definition>llig criar_lista</definition>
        <argsstring>()</argsstring>
        <name>criar_lista</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Cria uma lista vazia </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="9" column="1" bodyfile="listas.c" bodystart="9" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="listas_8c_1a3b000660acfaf305fe0478b37ca7e95d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">llig</ref></type>
        <definition>llig insere_cabeca</definition>
        <argsstring>(llig L, void *valor)</argsstring>
        <name>insere_cabeca</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">llig</ref></type>
          <declname>L</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insere um valor na cabeça da lista </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="17" column="1" bodyfile="listas.c" bodystart="17" bodyend="26"/>
      </memberdef>
      <memberdef kind="function" id="listas_8c_1ae0629c9fcb27ca78d3e0f23e43399fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* devolve_cabeca</definition>
        <argsstring>(llig L)</argsstring>
        <name>devolve_cabeca</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">llig</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Devolve a cabeça da lista </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="28" column="1" bodyfile="listas.c" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="listas_8c_1a004488958386a9d9cde72853c6d95980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">llig</ref></type>
        <definition>llig proximo</definition>
        <argsstring>(llig L)</argsstring>
        <name>proximo</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">llig</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Devolve a cauda da lista </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="30" column="1" bodyfile="listas.c" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="listas_8c_1a1907baaf7c56752c0508e5dc0198f1da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structnodo" kindref="compound">llig</ref></type>
        <definition>llig remove_cabeca</definition>
        <argsstring>(llig L)</argsstring>
        <name>remove_cabeca</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">llig</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Remove a cabeça da lista (libertando o espaço ocupado) e devolve a cauda </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="35" column="1" bodyfile="listas.c" bodystart="35" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="listas_8c_1a04ef0ee31d481227d9765b65f38b33ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lista_esta_vazia</definition>
        <argsstring>(llig L)</argsstring>
        <name>lista_esta_vazia</name>
        <param>
          <type><ref refid="structnodo" kindref="compound">llig</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Devolve verdareiro se a lista é vazia </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="41" column="1" bodyfile="listas.c" bodystart="41" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="listas_8c_1a9382f86f4fe3ab60886b484693bc06c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int menorelem</definition>
        <argsstring>(float *save, int *tamanho)</argsstring>
        <name>menorelem</name>
        <param>
          <type>float *</type>
          <declname>save</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>tamanho</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determina o índice do menor elemento do array </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="49" column="1" bodyfile="listas.c" bodystart="49" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="camada__de__dados_8h" kindref="compound">camada_de_dados.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="logica_8h" kindref="compound">logica.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="listas_8h" kindref="compound">listas.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><ref refid="structnodo" kindref="compound">llig</ref><sp/><ref refid="listas_8h_1a3f533b20c9ab2ad5b12ea67b8de913a7" kindref="member">criar_lista</ref>()</highlight></codeline>
<codeline lineno="10"><highlight class="normal">{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnodo" kindref="compound">llig</ref><sp/>lista<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structnodo" kindref="compound">listamalloc</ref>));</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>lista-&gt;head<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/>lista-&gt;tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lista;</highlight></codeline>
<codeline lineno="15"><highlight class="normal">}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="structnodo" kindref="compound">llig</ref><sp/><ref refid="listas_8h_1a3b000660acfaf305fe0478b37ca7e95d" kindref="member">insere_cabeca</ref>(<ref refid="structnodo" kindref="compound">llig</ref><sp/>L,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*valor)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnodo" kindref="compound">llig</ref><sp/>temp;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structnodo" kindref="compound">listamalloc</ref>));</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/>temp-&gt;tail<sp/>=<sp/>L;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>temp-&gt;head<sp/>=<sp/>valor;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(L-&gt;head<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>temp-&gt;tail<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>temp;</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="listas_8h_1ae0629c9fcb27ca78d3e0f23e43399fa0" kindref="member">devolve_cabeca</ref>(<ref refid="structnodo" kindref="compound">llig</ref><sp/>L)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(L-&gt;head);<sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="structnodo" kindref="compound">llig</ref><sp/><ref refid="listas_8h_1a004488958386a9d9cde72853c6d95980" kindref="member">proximo</ref>(<ref refid="structnodo" kindref="compound">llig</ref><sp/>L)</highlight></codeline>
<codeline lineno="31"><highlight class="normal">{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(L-&gt;tail);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="structnodo" kindref="compound">llig</ref><sp/><ref refid="listas_8h_1a1907baaf7c56752c0508e5dc0198f1da" kindref="member">remove_cabeca</ref>(<ref refid="structnodo" kindref="compound">llig</ref><sp/>L)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>L<sp/>=<sp/>L-&gt;tail;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>L;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="listas_8h_1a04ef0ee31d481227d9765b65f38b33ea" kindref="member">lista_esta_vazia</ref>(<ref refid="structnodo" kindref="compound">llig</ref><sp/>L)</highlight></codeline>
<codeline lineno="42"><highlight class="normal">{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ans<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(L-&gt;head)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ans<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="listas_8h_1a9382f86f4fe3ab60886b484693bc06c5" kindref="member">menorelem</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*save,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*tamanho)</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>menor<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(*tamanho);<sp/>i++)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(save[i]<sp/>&lt;<sp/>save[menor])</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>menor<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>menor;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="listas.c"/>
  </compounddef>
</doxygen>
